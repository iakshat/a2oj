{"version":3,"sources":["Todo.js","ladder.js","ladderMenu.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todos","todoList","length","map","que","boxClass","status","className","key","id","href","style","color","target","rel","Ladder","state","qns","data","this","props","user_solved","wrongSet","forEach","verdict","url","problem","contestId","toString","index","submissionURL","ladder_qns","split","setState","ladder_name","ladder_difficulty","Component","LadderMenu","ladders","list","onClick","setLadder","App","ladder_chosen","ladder","allLadders","name","filter","console","log","fetch","then","res","json","response","user","result","toShow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2a18e4d0.chunk.js","sourcesContent":["import React from 'react'\n\nvar Todo = ({todos}) => {\n\n    var todoList = todos.length ? (\n        todos.map(que => {\n            let boxClass = que.status === 1 ? (\" teal accent-4 white-text\") : (\n                que.status === -1 ? (\" red accent-4 white-text\") : (\" blue-text\")\n            );\n            // let boxClass = \"\";\n            return(\n                <div className={\"collection-item\" +boxClass} key={que.id}>\n                    <a href={que[\"Problem Link\"]} style={{color:\"inherit\"}} target=\"_blank\" rel=\"noopener noreferrer\">{que[\"Problem Name\"]}</a>\n                </div>\n            )\n        })\n    ) : (\n        <div className=\"collection-item\">\n            \"You have no qns here!!!\"\n        </div>\n    )\n\n    return(\n        <div className=\"center collection\">\n            { todoList }\n        </div>\n    )\n\n}\n\nexport default Todo","import React, {Component} from 'react'\nimport Todo from \"./Todo\"\n\nclass Ladder extends Component {\n\n  state = {\n    qns: []\n  }\n\n  componentDidMount(){\n    var data = this.props.user_solved;\n    var map = {}\n    var wrongSet = {}\n    data.forEach(que => {\n        if(que.verdict === \"OK\"){\n            let url = que.problem.contestId.toString()+\"/\"+que.problem.index;\n            let submissionURL = \"https://codeforces.com/contest/\"+que.problem.contestId+\"/submission/\"+que.id;\n            map[url] = submissionURL;\n        }\n        else if(que.verdict === \"WRONG_ANSWER\" || que.verdict === \"MEMORY_LIMIT_EXCEEDED\" || que.verdict === \"RUNTIME_ERROR\" || que.verdict === \"TIME_LIMIT_EXCEEDED\"){\n            let url = que.problem.contestId.toString()+\"/\"+que.problem.index;\n            wrongSet[url] = true;\n        }\n    })\n    var ladder_qns = this.props.ladder_qns.map(que => {\n      let url = que[\"Problem Link\"].split(\"problem/\")[1];\n      if(map[url]){\n        que.status = 1;\n        return que;\n      }\n      if(wrongSet[url]){\n        que.status = -1;\n        return que;\n      }\n      que.status = 0;\n      return que;\n    })\n    this.setState({\n      qns: ladder_qns\n    })\n  }\n    render() {\n        return (\n          <div className=\"center\">\n            <h4 className=\"center blue-text\">{this.props.ladder_name}</h4>\n            <h5 className=\"center blue-text\">{this.props.ladder_difficulty}</h5>\n            <Todo todos = {this.state.qns} />\n          </div>\n        )\n    }\n}\n\nexport default Ladder;","import React, {Component} from 'react'\n\nclass LadderMenu extends Component {\n\n    state = {\n        ladders: [\"Ladder Name: 11 - Codeforces Rating < 1300 (by ahmed_aly)\", \"Ladder Name: 12 - 1300 <= Codeforces Rating <= 1399 (by ahmed_aly)\", \"Ladder Name: 13 - 1400 <= Codeforces Rating <= 1499 (by ahmed_aly)\", \"Ladder Name: 14 - 1500 <= Codeforces Rating <= 1599 (by ahmed_aly)\", \"Ladder Name: 15 - 1600 <= Codeforces Rating <= 1699 (by ahmed_aly)\", \"Ladder Name: 16 - 1700 <= Codeforces Rating <= 1799 (by ahmed_aly)\", \"Ladder Name: 17 - 1800 <= Codeforces Rating <= 1899 (by ahmed_aly)\", \"Ladder Name: 18 - 1900 <= Codeforces Rating <= 1999 (by ahmed_aly)\", \"Ladder Name: 19 - 2000 <= Codeforces Rating <= 2099 (by ahmed_aly)\", \"Ladder Name: 20 - 2100 <= Codeforces Rating <= 2199 (by ahmed_aly)\", \"Ladder Name: 21 - Codeforces Rating >= 2200 (by ahmed_aly)\", \"Ladder Name: 22 - Codeforces Rating < 1300 (Extra) (by ahmed_aly)\", \"Ladder Name: 23 - 1300 <= Codeforces Rating <= 1399 (Extra) (by ahmed_aly)\", \"Ladder Name: 24 - 1400 <= Codeforces Rating <= 1499 (Extra) (by ahmed_aly)\", \"Ladder Name: 25 - 1500 <= Codeforces Rating <= 1599 (Extra) (by ahmed_aly)\", \"Ladder Name: 26 - 1600 <= Codeforces Rating <= 1699 (Extra) (by ahmed_aly)\", \"Ladder Name: 27 - 1700 <= Codeforces Rating <= 1799 (Extra) (by ahmed_aly)\", \"Ladder Name: 28 - 1800 <= Codeforces Rating <= 1899 (Extra) (by ahmed_aly)\", \"Ladder Name: 29 - 1900 <= Codeforces Rating <= 1999 (Extra) (by ahmed_aly)\", \"Ladder Name: 30 - 2000 <= Codeforces Rating <= 2099 (Extra) (by ahmed_aly)\", \"Ladder Name: 31 - 2100 <= Codeforces Rating <= 2199 (Extra) (by ahmed_aly)\", \"Ladder Name: 32 - Codeforces Rating >= 2200 (Extra) (by ahmed_aly)\"]\n    }\n    render() {\n        var list = this.state.ladders.map((ladder_name, id) => {\n            return (\n                <div className=\"collection-item\" key={id} onClick={() => {this.props.setLadder(ladder_name)}}>\n                    <span>{ladder_name}</span>\n                </div>\n            )\n        })\n        return (\n          <div className=\"center collection\">\n            <h3 className=\"center blue-text\">Ladders</h3>\n            <div className=\"collection center blue-text\">\n                {list}\n            </div>\n          </div>\n        )\n    }\n}\n\nexport default LadderMenu;","import React, {Component} from 'react';\nimport Ladder from './ladder'\nimport LadderMenu from './ladderMenu'\n\nclass App extends Component {\n  state = {\n    ladder_chosen: null,\n    ladder: {},\n    allLadders: []\n  }\n\n  setLadder = (name) => {\n    this.setState({\n      ladder_chosen:name,\n      ladder: this.state.allLadders.filter(ladder => ladder[\"ladder name\"] === name)[0]\n    })\n  }\n\n  componentDidMount(){\n    console.log(\"Mounted!\")\n    fetch(\"/ladders.json\")\n    .then(res => res.json())\n    .then(response => {\n      console.log(\"ladders: \",response)\n      this.setState({\n        allLadders: response\n      })\n    })\n    var username = \"iakshat\"//prompt(\"cf username??\");\n    fetch(\"https://codeforces.com/api/user.status?handle=\"+username+\"&from=1&count=5000\")\n    .then(res => res.json())\n    .then(res => {\n      this.setState({\n        user: res.result\n      })\n    })\n  }\n\n  render() {\n    console.log(\"ladder_chosen: \",this.state.ladder_chosen)\n    console.log(\"state: \", this.state)\n\n    var toShow = this.state.ladder_chosen ? (\n      <Ladder ladder_name={this.state.ladder[\"ladder name\"]} user_solved={this.state.user} ladder_difficulty={this.state.ladder[\"ladder difficulty\"]} ladder_qns={this.state.ladder[\"ladder questions\"]}></Ladder>\n    ) : (\n      <LadderMenu setLadder={this.setLadder}></LadderMenu>\n    )\n    return (\n      <div className=\"App container\">\n        {toShow}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}